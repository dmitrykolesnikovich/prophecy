//if nodes are not present they are not there if it is a list or they are null otherwise

FILE: CLASSDEF

CLASSDEF: name superclassName? DEFBLOCK

DEFBLOCK: (FIELDDEF | METHODDEF)*

FIELDDEF: MODIFIERLIST type name

METHODDEF: MODIFIERLIST type name PARAMLIST BLOCK

MODIFIERLIST: modifier*

PARAMLIST: PARAM*

PARAM: type name

BLOCK: (BLOCK | VARDECL | IF | WHILE | RETURN | ASSIGMENT | CALL)*

IF: EXPR BLOCK BLOCK? //2nd block is else block

WHILE: EXPR BLOCK

RETURN: EXPR

ASSIGMENT: (name | MEMBER | INDEX) EXPR

CALL: (name | MEMBER | INDEX) EXPRLIST

VARDECL: type name EXPR? //expr is initializer
    
EXPRLIST: EXPR*

EXPR: (
        ASSIGMENT | LOGICOR | LOGICAND | BITOR | BITXOR | BITAND | EQ | NEQ |
        LT | GT | LTE | GTE | SHIFTL | SHIFTR | ADD | SUB | MUL | DIV | CAST |
        PREINC | PREDEC | UPLUS | UMINUS | ULOGICNOT | UBITNOT | POSTINC | POSTDEC |
        name | MEMBER | INDEX | CALL | literal
      )

//EXPR is actually not a root node: it is just defined here so I dont have to list all those each time.

CAST: type EXPR

MEMBER: (MEMBER | INDEX | name | CALL) name

INDEX: (name | MEMBER | INDEX) EXPR //1st child is array, expr is the index 

LOGICOR, LOGICAND, BITOR, BITXOR, BITAND, EQ, NEQ,
LT, GT, LTE, GTE, SHIFTL, SHIFTR, ADD, SUB, MUL, DIV: EXPR EXPR

PREINC, PREDEC, UPLUS, UMINUS, ULOGICNOT, UBITNOT, POSTINC, POSTDEC: EXPR

//Token List:

ADD
ASSIGMENT
BITAND
BITOR
BITXOR
BLOCK
CALL
CAST
CLASSDEF
DEFBLOCK
DEFSTAT
DIV
EQ
EXPR
EXPRLIST
FIELDDEF
FILE
GT
GTE
IF
INDEX
LOGICAND
LOGICOR
LT
LTE
MEMBER
METHODDEF
MODIFIERLIST
MUL
NEQ
PARAM
PARAMLIST
POSTDEC
POSTINC
PREDEC
PREINC
RETURN
SHIFTL
SHIFTR
SUB
UBITNOT
ULOGICNOT
UMINUS
UPLUS
VARDECL
WHILE
